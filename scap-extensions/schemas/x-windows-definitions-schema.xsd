<?xml version="1.0" encoding="utf-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" 
            xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" 
            xmlns:sch="http://purl.oclc.org/dsdl/schematron"
            xmlns:x-win-def="http://oval.mitre.org/XMLSchema/oval-definitions-5#x-windows" 
            targetNamespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#x-windows"
            elementFormDefault="qualified" version="5.11">
      <xsd:import namespace="http://oval.mitre.org/XMLSchema/oval-common-5"/>
      <xsd:import namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5"/>
      <xsd:annotation>
            <xsd:documentation>The following is a proposal for experimental tests, objects, and states that compose extensions to the Windows specific tests found in Open Vulnerability and Assessment Language (OVAL). Each test is an extension of the standard test element defined in the Core Definition Schema. Through extension, each test inherits a set of elements and attributes that are shared amongst all OVAL tests. Each test is described in detail and should provide the information necessary to understand what each element and attribute represents. This document is intended for developers and assumes some familiarity with XML. A high level description of the interaction between the different tests and their relationship to the Core Definition Schema is not outlined here.</xsd:documentation>
            <xsd:documentation>The OVAL Schema is maintained and developed by the public OVAL Community. For more information, including how to get involved in the project and how to submit change requests, please visit the OVAL website at http://oval.mitre.org.</xsd:documentation>
            <xsd:appinfo>
                  <schema>Experimental Windows Definitions</schema>
                  <version>5.11.2:1.0</version>
                  <date>11/30/2016 09:00:00 AM</date>
                  <terms_of_use>Copyright (c) 2016, Center for Internet Security. All rights reserved.  The contents of this file are subject to the terms of the OVAL License located at https://oval.cisecurity.org/terms. See the OVAL License for the specific language governing permissions and limitations for use of this schema.  When distributing copies of the OVAL Schema, this license header must be included.</terms_of_use>
                  <sch:ns prefix="oval-def" uri="http://oval.mitre.org/XMLSchema/oval-definitions-5"/>
                  <sch:ns prefix="x-win-def" uri="http://oval.mitre.org/XMLSchema/oval-definitions-5#x-windows"/>
                  <sch:ns prefix="xsi" uri="http://www.w3.org/2001/XMLSchema-instance"/>
            </xsd:appinfo>
      </xsd:annotation>
      <!-- =============================================================================== -->
      <!-- ========================  CBS COMPONENT APPLICABLE TEST  ====================== -->
      <!-- =============================================================================== -->
      <xsd:element name="cbscomponentapplicable_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The cbscomponentapplicable_test is used to determine the applicability of a potential component update to a Windows system. The Windows side-by-side component architecture permits a system to have multiple versions of any given component installed at once, and applications requiring a specific version of a component will have an application manifest designating the characteristics of required assemblies. The TrustedInstaller is responsible for maintaining the component store, typically located in C:\Windows\winsxs, with corresponding manifests located in C:\Windows\winsxs\Manifests. The cbscomponentapplicable_test makes it possible to efficiently determine whether an update applies to any of the components in the store.</xsd:documentation>
                  <xsd:appinfo>
                        <oval:element_mapping>
                              <oval:test>cbscomponentapplicable_test</oval:test>
                              <oval:object>cbscomponentapplicable_object</oval:object>
                              <oval:state>cbscomponentapplicable_state</oval:state>
                              <oval:item target_namespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#windows">cbscomponentapplicable_item</oval:item>
                        </oval:element_mapping>
                  </xsd:appinfo>
                  <xsd:appinfo>
                        <sch:pattern id="win-def_cbscomponentapplicable">
                              <sch:rule context="x-win-def:cbscomponentapplicable_test/x-win-def:object">
                                    <sch:assert test="@object_ref=ancestor::oval-def:oval_definitions/oval-def:objects/x-win-def:cbscomponentapplicable_object/@id"><sch:value-of select="../@id"/> - the object child element of a cbscomponentapplicable_test must reference a cbscomponentapplicable_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="x-win-def:cbscomponentapplicable_test/x-win-def:state">
                                    <sch:assert test="@state_ref=ancestor::oval-def:oval_definitions/oval-def:states/x-win-def:cbscomponentapplicable_state/@id"><sch:value-of select="../@id"/> - the state child element of a cbscomponentapplicable_test must reference a cbscomponentapplicable_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="cbscomponentapplicable_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The cbscomponentapplicable_object describes a potential update to a component in the component store. It specifies a component name, and optionally, other characteristics as well as an elevate and target_version describing the potential update.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="win-def_cbscomponentapplicable_object_verify_filter_state">
                              <sch:rule context="x-win-def:cbscomponentapplicable_object//oval-def:filter">
                                    <sch:let name="parent_object" value="ancestor::x-win-def:cbscomponentapplicable_object"/>
                                    <sch:let name="parent_object_id" value="$parent_object/@id"/>
                                    <sch:let name="state_ref" value="."/>
                                    <sch:let name="reffed_state" value="ancestor::oval-def:oval_definitions/oval-def:states/*[@id=$state_ref]"/>
                                    <sch:let name="state_name" value="local-name($reffed_state)"/>
                                    <sch:let name="state_namespace" value="namespace-uri($reffed_state)"/>
                                    <sch:assert test="(($state_namespace='http://oval.mitre.org/XMLSchema/oval-definitions-5#windows') and ($state_name='cbscomponentapplicable_state'))">State referenced in filter for <sch:value-of select="name($parent_object)"/> '<sch:value-of select="$parent_object_id"/>' is of the wrong type. </sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set"/>
                                          <xsd:sequence>
                                                <xsd:element name="behaviors" type="x-win-def:CbsComponentApplicableBehaviors" minOccurs="1" maxOccurs="1">
                                                      <xsd:annotation>
                                                            <xsd:documentation>Defines the applicability criteria governing the collection of the cbscomponentapplicable_object.</xsd:documentation>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="name" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The CBS package name of interest.</xsd:documentation>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="arch" type="oval-def:EntityObjectStringType" nillable="true" minOccurs="1" maxOccurs="1">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The CBS package processorArchitecture, e.g., 'amd64', 'x86', 'wow64'.</xsd:documentation>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="lang" type="oval-def:EntityObjectStringType" nillable="true" minOccurs="1" maxOccurs="1">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The CBS package language string. This will typically be a code from https://msdn.microsoft.com/en-us/library/ms533052(v=vs.85).aspx, or 'none' to indicate a language-neutral package.</xsd:documentation>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="token" type="oval-def:EntityObjectStringType" nillable="true" minOccurs="1" maxOccurs="1">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The public key token of the code signing certificate used to sign the CBS package. This is the last 8 bytes of the SHA-1 digest of the public key, expressed in lower-case hexadecimal form.</xsd:documentation>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="cbscomponentapplicable_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The cbscomponentapplicable_state allows for assertions about the presence of applicable CBS components obtained from a cbscomponentapplicable_object.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The CBS package name.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="arch" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The CBS package processorArchitecture.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="lang" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The CBS package language.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="token" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>The public key token of the code signing certificate used to sign the CBS package.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="assembly_version" type="oval-def:EntityStateVersionType" minOccurs="0" maxOccurs="1">
                                          <xsd:annotation>
                                                <xsd:documentation>Indicates the version of a discovered assembly that is applicable for elevation to the target_version.</xsd:documentation>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="CbsComponentApplicableBehaviors">
            <xsd:annotation>
                  <xsd:documentation>The CbsComponentApplicableBehaviors complex type defines a number of behaviors that allow a targeted definition of the cbscomponentapplicable_object being specified.</xsd:documentation>
            </xsd:annotation>
            <xsd:attribute name="elevate" use="optional" default="revision">
                  <xsd:annotation>
                        <xsd:documentation>The 'elevate' attribute specifies the package elevation scope, which is used to determine the applicability of the target version. Values are restricted to: revision, distribution, build, serviceLevel, install and version. These values describe the different default elevation types permissible for a CBS component update.</xsd:documentation>
                        <xsd:documentation>For more information, see "Versions and elevation values" at https://technet.microsoft.com/en-us/library/cc732334(v=ws.10).aspx</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:string">
                              <xsd:enumeration value="revision">
                                    <xsd:annotation>
                                          <xsd:documentation>Upgrading the revision part of the version (which is typically a fix for the component)—for example, upgrading from 6.0.5000.0 to 6.0.5000.1.</xsd:documentation>
                                    </xsd:annotation>
                              </xsd:enumeration>
                              <xsd:enumeration value="distribution">
                                    <xsd:annotation>
                                          <xsd:documentation>Elevating the distribution branch—for example, upgrading from the RTMGDR branch to the RTMQFE branch.</xsd:documentation>
                                    </xsd:annotation>
                              </xsd:enumeration>
                              <xsd:enumeration value="build">
                                    <xsd:annotation>
                                          <xsd:documentation>Elevating the build number—for example, upgrading from 6.0.5000.0 to 6.0.5001.0.</xsd:documentation>
                                    </xsd:annotation>
                              </xsd:enumeration>
                              <xsd:enumeration value="serviceLevel">
                                    <xsd:annotation>
                                          <xsd:documentation>Installing a service pack.</xsd:documentation>
                                    </xsd:annotation>
                              </xsd:enumeration>
                              <xsd:enumeration value="install">
                                    <xsd:annotation>
                                          <xsd:documentation>Installing a component for the first time onto a computer.</xsd:documentation>
                                    </xsd:annotation>
                              </xsd:enumeration>
                              <xsd:enumeration value="version">
                                    <xsd:annotation>
                                          <xsd:documentation>Upgrading the major and/or minor parts of the version—for example, elevating a minor version would mean upgrading from version 1.1 to version 1.2.</xsd:documentation>
                                    </xsd:annotation>
                              </xsd:enumeration>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="target_version" use="required">
                  <xsd:annotation>
                        <xsd:documentation>The 'target_version' attribute specifies the targeted version for which the applicability of the specified elevation shall be checked. It must be a version string of the form '6.1.12.221'.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:string">
                            <xsd:pattern value="[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+"/>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
      </xsd:complexType>
</xsd:schema>
